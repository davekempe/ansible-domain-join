---

- name: debian | add apt key
  apt_key:
    url: "{{apt_key}}"
    state: present

- name: debian | adding PowerBroker Identity Service repo
  get_url:
    url: "{{pbis_apt_repo}}"
    dest: "/etc/apt/sources.list.d/pbiso.list"
    mode: 0744

- name: debian | apt cache update
  apt: 
    update_cache: yes

- name: debian | installing pbis-open from apt repo
  apt: name=pbis-open update_cache=yes state=latest

- name: debian | checking the current domain status
  shell: /opt/pbis/bin/lsa get-status | grep Netbios | awk '{print $3}' | grep "{{ ad_domain_netbios }}"
  register: domain_status
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | debug domain check
  debug: var=domain_status.stdout

- name: debian | joining host to AD domain
  command: 'domainjoin-cli join "{{ ad_domain }}" "{{ ad_user }}" "{{ ad_password }}"'
  when:  domain_status.stdout == '' or domain_status.stdout != ad_domain_netbios

- name: debian | setting includedir in sudoers
  lineinfile:
    dest: /etc/sudoers
    line: "#includedir /etc/sudoers.d"
    state: present
    validate: "/usr/sbin/visudo -cf %s"

- name: debian | granting sudo rights to Domain Groups
  lineinfile:
    dest: /etc/sudoers
    line: "%{{ ad_domain_netbios }}\\\\{{ item }} ALL=(ALL:ALL) ALL"
    state: present
    validate: 'visudo -cf %s'
  with_items: "{{ domain_sudo_groups }}"

- name: debian | checking UserDomainPrefix
  shell: /opt/pbis/bin/config --show UserDomainPrefix | grep {{ pri_domain_name }}
  register: UserDomainPrefix
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | checking AssumeDefaultDomain
  shell: /opt/pbis/bin/config --show AssumeDefaultDomain | grep true
  register: AssumeDefaultDomain
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | checking LoginShellTemplate
  shell: /opt/pbis/bin/config --show LoginShellTemplate | grep "/bin/bash"
  register: LoginShellTemplate
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | checking Local_LoginShellTemplate
  shell: /opt/pbis/bin/config --show Local_LoginShellTemplate | grep "/bin/bash"
  register: Local_LoginShellTemplate
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | checking Local_HomeDirTemplate
  shell: /opt/pbis/bin/config --show Local_HomeDirTemplate
  register: Local_HomeDirTemplate
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | checking HomeDirTemplate
  shell: /opt/pbis/bin/config --show HomeDirTemplate
  register: HomeDirTemplate
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | checking RequireMembershipOf
  shell: /opt/pbis/bin/config --show RequireMembershipOf
  register: RequireMembershipOf
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: debian | setting domain prefix
  command: '/opt/pbis/bin/config UserDomainPrefix {{ pri_domain_name }}'
  when:  UserDomainPrefix.stdout == '' or UserDomainPrefix.stdout != pri_domain_name

- name: debian | setup assume default domain
  command: '/opt/pbis/bin/config AssumeDefaultDomain true'
  when:  AssumeDefaultDomain.stdout == '' or AssumeDefaultDomain.stdout != "true"

- name: debian | setting default shell to bash
  command: '/opt/pbis/bin/config LoginShellTemplate /bin/bash'
  when:  LoginShellTemplate.stdout == '' or LoginShellTemplate.stdout != "/bin/bash"

- name: debian | setting local default shell to bash
  command: '/opt/pbis/bin/config Local_LoginShellTemplate /bin/bash'
  when:  Local_LoginShellTemplate.stdout == '' or Local_LoginShellTemplate.stdout != "/bin/bash"

# Commenting these out, as they were not used or commented out in the workstation_config.sh
#
#- name: debian | setting default home directory
#  command: '/opt/pbis/bin/config HomeDirTemplate %H/%U'
#  when:
#    HomeDirTemplate.stdout_lines.1 != "%H/%U"
#
#- name: debian | setting default home directory template
#  command: '/opt/pbis/bin/config Local_HomeDirTemplate %H/%U'
#  when:
#    Local_HomeDirTemplate.stdout_lines.1 != "%H/%U"
#
#- name: debian | requiring membership of security group
#  command: '/opt/pbis/bin/config RequireMembershipOf "{{ ad_domain }}\\{{ domain_sudo_groups }}"'
#  when:
#    RequireMembershipOf.stdout_lines.1 != "{{ ad_domain }}\\{{ domain_sudo_groups }}"

